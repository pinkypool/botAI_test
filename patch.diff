 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/rag_bot.py b/rag_bot.py
index 4efbd2f6ba415d79a0f3e76a413dcc0b97a00e63..2a106c598dd3b319e68aa8429a52c5e9d9cecc2b 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -142,55 +142,59 @@ def get_delivery_price(user_text: str, order_sum: int = 0) -> str:
             return f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ —Ä–∞–π–æ–Ω—É '{zone.title()}': {price} ‚Ç∏."
     for city, price in city_delivery.items():
         if city in user_text:
             if order_sum >= FREE_DELIVERY_SUM:
                 return f"–î–æ—Å—Ç–∞–≤–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ –≥–æ—Ä–æ–¥—É –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 10 000 ‚Ç∏."
             return f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –≥–æ—Ä–æ–¥—É: {price} ‚Ç∏."
     return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω –∏–ª–∏ –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ —Ä–∞–π–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏!"
 
 # --- –í—Å—è —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–ª–∞—Å—å –ø—Ä–µ–∂–Ω–µ–π: —Ç–æ–≤–∞—Ä—ã, –ø–∞–º—è—Ç—å, –Ω–∞–ª–∏—á–∏–µ ---
 def detect_stock_question(query: str) -> bool:
     stock_patterns = [
         r'(–µ—Å—Ç—å|–∏–º–µ–µ—Ç—Å—è|–¥–æ—Å—Ç—É–ø–Ω)[–∞-—è]*\s*(–ª–∏\s*)?(–≤\s*–Ω–∞–ª–∏—á–∏–∏|–Ω–∞\s*—Å–∫–ª–∞–¥[–∞-—è]*)',
         r'(–≥–¥–µ\s*–≤–∑—è—Ç—å|–≥–¥–µ\s*–∫—É–ø–∏—Ç—å|–≥–¥–µ\s*–Ω–∞–π—Ç–∏|–Ω–∞\s*–∫–∞–∫–æ–π\s*—Ç–æ—á–∫–µ|–Ω–∞\s*—Ç–æ—á–∫–µ)',
         r'(—Å–∫–æ–ª—å–∫–æ\s*–æ—Å—Ç–∞–ª–æ—Å—å|–∫–∞–∫–æ–µ\s*–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)',
         r'(–º–æ–∂–Ω–æ\s*–∑–∞–±—Ä–∞—Ç—å|–º–æ–∂–Ω–æ\s*–∫—É–ø–∏—Ç—å|—Å–∞–º–æ–≤—ã–≤–æ–∑|–∑–∞–±—Ä–∞—Ç—å)',
         r'(–≥–¥–µ\s*–∑–∞–±—Ä–∞—Ç—å|–¥–æ—Å—Ç–∞–≤–∫–∞)'
     ]
     query = re.sub(r'[^\w\s]', '', query.lower())
     return any(re.search(pattern, query) for pattern in stock_patterns)
 
 def find_similar_products(query: str, product_list: list, n=3, cutoff=0.6) -> list:
     query = re.sub(r'[^\w\s]', '', query.lower())
     return get_close_matches(query, product_list, n=n, cutoff=cutoff)
 
 def extract_product_name(query: str) -> str:
-    stop_words = {'–µ—Å—Ç—å', '–ª–∏', '–≥–¥–µ', '–≤–∑—è—Ç—å', '–∫—É–ø–∏—Ç—å', '–Ω–∞–π—Ç–∏',
-                '—Å–∫–æ–ª—å–∫–æ', '–æ—Å—Ç–∞–ª–æ—Å—å', '–Ω–∞–ª–∏—á–∏–µ', '–Ω–∞', '—Ç–æ—á–∫–µ',
-                '–º–æ–∂–Ω–æ', '–∑–∞–±—Ä–∞—Ç—å', '–∫–∞–∫–æ–µ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–≤', '—Å–∞–º–æ–≤—ã–≤–æ–∑', '–¥–æ—Å—Ç–∞–≤–∫–∞'}
-    words = [word for word in re.findall(r'\w+', query.lower()) if word not in stop_words]
-    return ' '.join(words)
+    """Return the product name from the query if it explicitly appears."""
+    q = query.lower()
+    candidates = [name for name in all_product_names if name in q]
+    if not candidates:
+        return ""
+    if len(candidates) == 1:
+        return candidates[0]
+    best = get_close_matches(q, candidates, n=1)
+    return best[0] if best else candidates[0]
 
 def get_product_stock(meta_href: str, api_key: str):
     url = f"https://api.moysklad.ru/api/remap/1.2/report/stock/bystore?filter=product={meta_href}"
     headers = {"Authorization": f"Bearer {api_key}", "Accept-Encoding": "gzip", "Content-Type": "application/json"}
     try:
         response = requests.get(url, headers=headers)
         response.raise_for_status()
         data = response.json()
         rows = data.get("rows", [])
         stocks = []
         stock_dict = {}
         for item in rows:
             for store in item.get("stockByStore", []):
                 if store.get("stock", 0) > 0:
                     store_name = store.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
                     qty = int(store["stock"])
                     stock_dict[store_name] = qty
                     stocks.append(f"‚Ä¢ {store_name}: {qty} —à—Ç.")
         if stocks:
             return "üîç **–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞:**\n" + "\n".join(stocks), stock_dict
         return "–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.", {}
     except requests.exceptions.RequestException as e:
         logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
         return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è: {str(e)}", {}
 
diff --git a/rag_bot.py b/rag_bot.py
index 4efbd2f6ba415d79a0f3e76a413dcc0b97a00e63..2a106c598dd3b319e68aa8429a52c5e9d9cecc2b 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -332,64 +336,64 @@ while True:
             product_row = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == selected_product].iloc[0]
             meta_href = product_row["Meta Href"]
             logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: Meta Href={meta_href}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{product_row['–ù–∞–∑–≤–∞–Ω–∏–µ']}'")
             stock_info, available_stock = get_product_stock(meta_href, MOYSKLAD_API_KEY)
             print("–ë–æ—Ç:", stock_info)
             if available_stock:
                 available_pickup_stores = list(available_stock.keys())
                 price = get_product_price(product_row["–ù–∞–∑–≤–∞–Ω–∏–µ"])
                 pending_product = {"name": product_row["–ù–∞–∑–≤–∞–Ω–∏–µ"], "price": price}
                 print("–ë–æ—Ç: –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑?")
                 awaiting_quantity = True
             else:
                 available_pickup_stores = []
             last_product_query = selected_product.lower()
             current_selection = None
             continue
         else:
             print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
             continue
 
     if current_selection:
         print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
         continue
 
     if detect_stock_question(q):
-        query_words = extract_product_name(q).split()
-        if (
-            (len(query_words) <= 2 and last_product_query)
-            or any(phrase in q.lower() for phrase in clarifying_phrases)
-        ):
-            product_query = last_product_query if last_product_query else extract_product_name(q)
+        product_query = extract_product_name(q)
+        if not product_query:
+            if last_product_query and (
+                len(q.split()) <= 2
+                or any(phrase in q.lower() for phrase in clarifying_phrases)
+            ):
+                product_query = last_product_query
+            else:
+                print("–ë–æ—Ç: –°–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")
+                continue
         else:
-            product_query = extract_product_name(q)
             last_product_query = product_query
 
         logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞: '{product_query}'")
-        if not product_query:
-            print("–ë–æ—Ç: –°–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")
-            continue
 
         similar_products = find_similar_products(product_query, all_product_names)
         if not similar_products:
             print("–ë–æ—Ç: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ.")
             continue
 
         if len(similar_products) > 1:
             original_names = []
             for name in similar_products:
                 original_name = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == name].iloc[0]["–ù–∞–∑–≤–∞–Ω–∏–µ"]
                 original_names.append(original_name)
 
             print("–ë–æ—Ç: –£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:")
             for i, name in enumerate(original_names, 1):
                 print(f"{i}. {name}")
             print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
             current_selection = original_names
             continue
 
         product_name = similar_products[0]
         product_row = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == product_name].iloc[0]
         meta_href = product_row["Meta Href"]
         logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: Meta Href={meta_href}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{product_row['–ù–∞–∑–≤–∞–Ω–∏–µ']}'")
         stock_info, available_stock = get_product_stock(meta_href, MOYSKLAD_API_KEY)
         print("–ë–æ—Ç:", stock_info)
 
EOF
)