 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/rag_bot.py b/rag_bot.py
index 2a106c598dd3b319e68aa8429a52c5e9d9cecc2b..32ce0528f1b188b04a6ede4de9e5b1c4d9ace149 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -204,66 +204,81 @@ def get_product_price(product_name: str) -> int:
     for path in glob.glob("rag_knowledge_base/menu_*.txt"):
         with open(path, encoding="utf-8") as f:
             for line in f:
                 if product_name.lower() in line.lower():
                     m = price_pattern.search(line)
                     if m:
                         return int(m.group(1))
     return 0
     
 # --- –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–æ–º ---
 def summarize_order() -> int:
     """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É."""
     total = 0
     if not order:
         print("–ë–æ—Ç: –ó–∞–∫–∞–∑ –ø—É—Å—Ç.")
         return total
     print("–ë–æ—Ç: –í–∞—à –∑–∞–∫–∞–∑ üõç:")
     for item in order:
         subtotal = item["price"] * item["quantity"]
         total += subtotal
         print(f" - {item['name']} x{item['quantity']} = {subtotal} ‚Ç∏")
     print(f"–ò—Ç–æ–≥–æ: {total} ‚Ç∏ üéâ")
     return total
 
 def respond_with_delivery_info(address: str, order_total: int, available_names=None) -> None:
-    """–°–æ–æ–±—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞."""
+    """–°–æ–æ–±—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç–æ—á–∫–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å —É—á—ë—Ç–æ–º –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞."""
     delivery_msg = get_delivery_price(address, order_total)
     print("–ë–æ—Ç:", delivery_msg)
+
     coords = geocode_address_2gis(address)
-    if coords:
-        nearest, dist = find_nearest_pickup(coords, pickup_points, available_names)
-        if nearest:
-            print(
-                f"–ë–æ—Ç: –ë–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ ‚Äî {nearest['name']} ({nearest['address']}). –î–æ –Ω–µ—ë {dist:.1f} –∫–º."
-            )
-        else:
-            print("–ë–æ—Ç: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
-    else:
+    if not coords:
         print(
             "–ë–æ—Ç: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
         )
+        return
+
+    available_points = []
+    for point in pickup_points:
+        if available_names and not any(name.lower() in point["name"].lower() for name in available_names):
+            continue
+        if not point.get("lat") or not point.get("lon"):
+            geo = geocode_address_2gis(point["address"])
+            if not geo:
+                continue
+            point["lat"], point["lon"] = geo
+        dist = geodesic(coords, (point["lat"], point["lon"])).kilometers
+        available_points.append((dist, point))
+
+    if not available_points:
+        print("–ë–æ—Ç: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
+        return
+
+    available_points.sort(key=lambda x: x[0])
+    print("–ë–æ—Ç: –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å —ç—Ç–∏–º —Ç–æ–≤–∞—Ä–æ–º:")
+    for dist, p in available_points:
+        print(f" ‚Ä¢ {p['name']} ({p['address']}) ‚Äì {dist:.1f} –∫–º üìç")
 
 
 print("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Hani –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É. –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ '–≤—ã—Ö–æ–¥':")
 logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
 
 current_selection = None
 last_product_query = None
 user_address = None
 awaiting_delivery_choice = False
 awaiting_address = False
 available_pickup_stores = []
 
 clarifying_phrases = [
     '–µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏', '–µ—Å—Ç—å?', '–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å?', '–¥–æ—Å—Ç—É–ø–µ–Ω?', '—Å–∞–º–æ–≤—ã–≤–æ–∑',
     '–≥–¥–µ –∑–∞–±—Ä–∞—Ç—å', '–∞ –µ—Å—Ç—å', '–µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏', '–Ω–∞–ª–∏—á–∏–µ?', '–≥–¥–µ –≤–∑—è—Ç—å',
     '–∑–∞–±—Ä–∞—Ç—å', '–Ω–∞ —Ç–æ—á–∫–µ', '–Ω–∞ –∫–∞–∫–æ–π —Ç–æ—á–∫–µ', '–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞', '—Ç–æ—á–∫–∞',
     '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π'
 ]
 
 while True:
     q = input("–í—ã: ").strip()
     logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: '{q}'")
 
     if awaiting_address:
         user_address = q
diff --git a/rag_bot.py b/rag_bot.py
index 2a106c598dd3b319e68aa8429a52c5e9d9cecc2b..32ce0528f1b188b04a6ede4de9e5b1c4d9ace149 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -304,51 +319,51 @@ while True:
             awaiting_address = True
             continue
         elif q.lower().strip() == "–¥–æ—Å—Ç–∞–≤–∫–∞":
             print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ üè†.")
             awaiting_delivery_choice = False
             awaiting_address = True
             continue
         else:
             user_address = q
             total = summarize_order()
             respond_with_delivery_info(user_address, total, available_pickup_stores)
             awaiting_delivery_choice = False
             continue
 
 
     # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏, –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –ø–æ –∞–¥—Ä–µ—Å—É –∏–ª–∏ —Ä–∞–π–æ–Ω—É ---
     if any(word in q.lower() for word in ["–≥–æ—Ä–æ–¥", "–∞–¥—Ä–µ—Å", "–Ω–∞—Ö–æ–∂—É—Å—å", "—è –∏–∑", "—Ä–∞–π–æ–Ω", "–¥–æ—Å—Ç–∞–≤–∫–∞"]):
         user_address = q
         total = summarize_order()
         respond_with_delivery_info(user_address, total, available_pickup_stores)
         continue
 
     # --- –¢–æ–≤–∞—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ ---
     if q.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
         logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
-        print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
+        print("–ë–æ—Ç: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
         break
 
     if current_selection and q.isdigit():
         choice = int(q)
         if 1 <= choice <= len(current_selection):
             selected_product = current_selection[choice-1]
             product_row = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == selected_product].iloc[0]
             meta_href = product_row["Meta Href"]
             logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: Meta Href={meta_href}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{product_row['–ù–∞–∑–≤–∞–Ω–∏–µ']}'")
             stock_info, available_stock = get_product_stock(meta_href, MOYSKLAD_API_KEY)
             print("–ë–æ—Ç:", stock_info)
             if available_stock:
                 available_pickup_stores = list(available_stock.keys())
                 price = get_product_price(product_row["–ù–∞–∑–≤–∞–Ω–∏–µ"])
                 pending_product = {"name": product_row["–ù–∞–∑–≤–∞–Ω–∏–µ"], "price": price}
                 print("–ë–æ—Ç: –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑?")
                 awaiting_quantity = True
             else:
                 available_pickup_stores = []
             last_product_query = selected_product.lower()
             current_selection = None
             continue
         else:
             print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
             continue
 
EOF
)