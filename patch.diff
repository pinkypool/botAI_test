 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/rag_bot.py b/rag_bot.py
index a3e18dcd0dd4271c7be9ffe8fe10eea4e3efe613..4efbd2f6ba415d79a0f3e76a413dcc0b97a00e63 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -191,56 +191,56 @@ def get_product_stock(meta_href: str, api_key: str):
             return "üîç **–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞:**\n" + "\n".join(stocks), stock_dict
         return "–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.", {}
     except requests.exceptions.RequestException as e:
         logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
         return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è: {str(e)}", {}
 
 def get_product_price(product_name: str) -> int:
     """–ò—â–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë."""
     price_pattern = re.compile(r"–¶–µ–Ω–∞:\s*(\d+)")
     for path in glob.glob("rag_knowledge_base/menu_*.txt"):
         with open(path, encoding="utf-8") as f:
             for line in f:
                 if product_name.lower() in line.lower():
                     m = price_pattern.search(line)
                     if m:
                         return int(m.group(1))
     return 0
     
 # --- –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–æ–º ---
 def summarize_order() -> int:
     """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É."""
     total = 0
     if not order:
         print("–ë–æ—Ç: –ó–∞–∫–∞–∑ –ø—É—Å—Ç.")
         return total
-    print("–ë–æ—Ç: –í–∞—à –∑–∞–∫–∞–∑:")
+    print("–ë–æ—Ç: –í–∞—à –∑–∞–∫–∞–∑ üõç:")
     for item in order:
         subtotal = item["price"] * item["quantity"]
         total += subtotal
         print(f" - {item['name']} x{item['quantity']} = {subtotal} ‚Ç∏")
-    print(f"–ò—Ç–æ–≥–æ: {total} ‚Ç∏")
+    print(f"–ò—Ç–æ–≥–æ: {total} ‚Ç∏ üéâ")
     return total
 
 def respond_with_delivery_info(address: str, order_total: int, available_names=None) -> None:
     """–°–æ–æ–±—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞."""
     delivery_msg = get_delivery_price(address, order_total)
     print("–ë–æ—Ç:", delivery_msg)
     coords = geocode_address_2gis(address)
     if coords:
         nearest, dist = find_nearest_pickup(coords, pickup_points, available_names)
         if nearest:
             print(
                 f"–ë–æ—Ç: –ë–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ ‚Äî {nearest['name']} ({nearest['address']}). –î–æ –Ω–µ—ë {dist:.1f} –∫–º."
             )
         else:
             print("–ë–æ—Ç: –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
     else:
         print(
             "–ë–æ—Ç: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
         )
 
 
 print("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Hani –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É. –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ '–≤—ã—Ö–æ–¥':")
 logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
 
 current_selection = None
diff --git a/rag_bot.py b/rag_bot.py
index a3e18dcd0dd4271c7be9ffe8fe10eea4e3efe613..4efbd2f6ba415d79a0f3e76a413dcc0b97a00e63 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -250,78 +250,82 @@ awaiting_delivery_choice = False
 awaiting_address = False
 available_pickup_stores = []
 
 clarifying_phrases = [
     '–µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏', '–µ—Å—Ç—å?', '–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å?', '–¥–æ—Å—Ç—É–ø–µ–Ω?', '—Å–∞–º–æ–≤—ã–≤–æ–∑',
     '–≥–¥–µ –∑–∞–±—Ä–∞—Ç—å', '–∞ –µ—Å—Ç—å', '–µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏', '–Ω–∞–ª–∏—á–∏–µ?', '–≥–¥–µ –≤–∑—è—Ç—å',
     '–∑–∞–±—Ä–∞—Ç—å', '–Ω–∞ —Ç–æ—á–∫–µ', '–Ω–∞ –∫–∞–∫–æ–π —Ç–æ—á–∫–µ', '–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞', '—Ç–æ—á–∫–∞',
     '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π'
 ]
 
 while True:
     q = input("–í—ã: ").strip()
     logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: '{q}'")
 
     if awaiting_address:
         user_address = q
         total = summarize_order()
         respond_with_delivery_info(user_address, total, available_pickup_stores)
         awaiting_address = False
         continue
 
     if awaiting_quantity:
         if q.isdigit():
             qty = int(q)
             order.append({"name": pending_product["name"], "price": pending_product["price"], "quantity": qty})
-            print(f"–ë–æ—Ç: –î–æ–±–∞–≤–ª–µ–Ω–æ {pending_product['name']} x{qty} –≤ –∑–∞–∫–∞–∑.")
+            print(f"–ë–æ—Ç: –î–æ–±–∞–≤–ª–µ–Ω–æ {pending_product['name']} x{qty} –≤ –∑–∞–∫–∞–∑ üòä")
             pending_product = None
             awaiting_quantity = False
-            print("–ë–æ—Ç: –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–µ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'.")
+            print("–ë–æ—Ç: –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â—ë? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ '–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑' üòâ")
             awaiting_finalize = True
         else:
             print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–π.")
         continue
 
     if awaiting_finalize:
         if q.lower() in ["–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "–æ—Ñ–æ—Ä–º–∏—Ç—å", "–∑–∞–≤–µ—Ä—à–∏—Ç—å", "–∫–æ–Ω–µ—Ü", "–Ω–µ—Ç"]:
             summarize_order()
-            print("–ë–æ—Ç: –£–∫–∞–∂–∏—Ç–µ '—Å–∞–º–æ–≤—ã–≤–æ–∑' –∏–ª–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.")
+            print("–ë–æ—Ç: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑? üöö")
             awaiting_finalize = False
             awaiting_delivery_choice = True
             continue
         else:
             awaiting_finalize = False
 
     if awaiting_delivery_choice:
         if "—Å–∞–º–æ–≤—ã–≤–æ–∑" in q.lower() or "–∑–∞–±—Ä–∞—Ç—å" in q.lower():
-            summarize_order()
             print(
-                "–ë–æ—Ç: –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞."
+                "–ë–æ—Ç: –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ üòä."
             )
             awaiting_delivery_choice = False
             awaiting_address = True
             continue
+        elif q.lower().strip() == "–¥–æ—Å—Ç–∞–≤–∫–∞":
+            print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ üè†.")
+            awaiting_delivery_choice = False
+            awaiting_address = True
+            continue
         else:
             user_address = q
             total = summarize_order()
             respond_with_delivery_info(user_address, total, available_pickup_stores)
             awaiting_delivery_choice = False
             continue
 
 
     # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏, –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –ø–æ –∞–¥—Ä–µ—Å—É –∏–ª–∏ —Ä–∞–π–æ–Ω—É ---
     if any(word in q.lower() for word in ["–≥–æ—Ä–æ–¥", "–∞–¥—Ä–µ—Å", "–Ω–∞—Ö–æ–∂—É—Å—å", "—è –∏–∑", "—Ä–∞–π–æ–Ω", "–¥–æ—Å—Ç–∞–≤–∫–∞"]):
         user_address = q
         total = summarize_order()
         respond_with_delivery_info(user_address, total, available_pickup_stores)
         continue
 
     # --- –¢–æ–≤–∞—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ ---
     if q.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
         logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
         print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
         break
 
     if current_selection and q.isdigit():
         choice = int(q)
         if 1 <= choice <= len(current_selection):
             selected_product = current_selection[choice-1]
 
EOF
)