diff --git a/rag_bot.py b/rag_bot.py
index 2036c3861865a3048422e801dad2eb90aaff4a19..4b9708745545bcd2a360f7c81799563fef10ef73 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -41,54 +41,55 @@ pickup_points = [
     {"city": "–¢–µ–º–∏—Ä—Ç–∞—É",  "name": "Hani, –ø—Ä. –ú–∏—Ä–∞ 712",    "address": "–¢–µ–º–∏—Ä—Ç–∞—É, –ø—Ä. –ú–∏—Ä–∞ 712"},
     {"city": "–¢–µ–º–∏—Ä—Ç–∞—É",  "name": "Hani, –†–µ—Å–ø—É–±–ª–∏–∫–∏ 86",   "address": "–¢–µ–º–∏—Ä—Ç–∞—É, —É–ª. –†–µ—Å–ø—É–±–ª–∏–∫–∏ 86"},
     {"city": "–¢–µ–º–∏—Ä—Ç–∞—É",  "name": "Hani, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω 43–∞",  "address": "–¢–µ–º–∏—Ä—Ç–∞—É, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω 43–∞"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –¢—É—Ä–∫–µ—Å—Ç–∞–Ω 20",    "address": "–ê—Å—Ç–∞–Ω–∞, —É–ª. –¢—É—Ä–∫–µ—Å—Ç–∞–Ω 20"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –¢—É—Ä–∫–µ—Å—Ç–∞–Ω 28",    "address": "–ê—Å—Ç–∞–Ω–∞, —É–ª. –¢—É—Ä–∫–µ—Å—Ç–∞–Ω 28"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –ò–º–∞–Ω–±–∞–µ–≤–∞ 7–∞",    "address": "–ê—Å—Ç–∞–Ω–∞, —É–ª. –ò–º–∞–Ω–±–∞–µ–≤–∞ 7–∞"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –ú–∞–Ω–≥–∏–ª–∏–∫ –µ–ª 45–∞", "address": "–ê—Å—Ç–∞–Ω–∞, –ø—Ä. –ú–∞–Ω–≥–∏–ª–∏–∫ –µ–ª 45–∞"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –¢–∞—É–µ–ª—Å–∏–∑–¥–∏–∫ 39",  "address": "–ê—Å—Ç–∞–Ω–∞, –ø—Ä. –¢–∞—É–µ–ª—Å–∏–∑–¥–∏–∫ 39"},
 ]
 
 delivery_zones = {
     "–≥–æ—Ä–æ–¥": 500, "—é–≥–æ-–≤–æ—Å—Ç–æ–∫": 500, "–º–∏—Ö–∞–π–ª–æ–≤–∫–∞": 500, "–∑–∞ —Ü–µ—Ä–∫–æ–≤—å—é": 1000,
     "—Ñ–µ–¥–æ—Ä–æ–≤–∫–∞": 500, "–ø–æ—Å–ª–µ –ø–æ–∂–∞—Ä–Ω–æ–π —á–∞—Å—Ç–∏": 1000, "–º–∞–π–∫—É–¥—É–∫ –¥–æ —Ç–¥ —É–º–∞–π": 1000,
     "–º–∞–π–∫—É–¥—É–∫ –ø–æ—Å–ª–µ —Ç–¥ —É–º–∞–π": 1500, "–ø—Ä–∏—à–∞—Ö—Ç–∏–Ω—Å–∫": 1500, "–∂–±–∏": 1500, "–∫—É–Ω–∫–µ–π": 1000
 }
 city_delivery = {
     "–∫–∞—Ä–∞–≥–∞–Ω–¥": 500, "—Ç–µ–º–∏—Ä—Ç–∞—É": 500, "–∞—Å—Ç–∞–Ω": 700, "–ª–µ–≤—ã–π –±–µ—Ä–µ–≥": 700, "–ø—Ä–∞–≤—ã–π –±–µ—Ä–µ–≥": 1000
 }
 
 # --- PROMPT ---
 prompt_template = PromptTemplate(
     input_variables=["context", "question", "chat_history"],
     template="""
 –¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–∞—Ñ–µ-–∫–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–æ–π Hani.
 
-–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π –¥–∏–∞–ª–æ–≥ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è ‚Äî –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è. 
-–ó–∞—Ç–µ–º –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. 
-–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, —É–∑–Ω–∞–π –∞–¥—Ä–µ—Å –∏–ª–∏ –≥–æ—Ä–æ–¥, –ø—Ä–µ–¥–ª–æ–∂–∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å). 
-–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî —É—Ç–æ—á–Ω–∏, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–æ–≤–∞—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Å–æ—Å—Ç–∞–≤, —Ü–µ–Ω–∞, –≤–µ—Å, –Ω–∞–ª–∏—á–∏–µ).
+–ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞, –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫—Ä–∞—Ç–∫–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è.
+–ó–∞—Ç–µ–º –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç.
+–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, —É–∑–Ω–∞–π, –±—É–¥–µ—Ç –ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞, –∏ –ø–æ–ø—Ä–æ—Å–∏ –∞–¥—Ä–µ—Å –∏–ª–∏ –≥–æ—Ä–æ–¥.
+–ü—Ä–µ–¥–ª–æ–∂–∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å.
+–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ç–æ—á–Ω–∏, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–æ–≤–∞—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Å–æ—Å—Ç–∞–≤, —Ü–µ–Ω–∞, –≤–µ—Å, –Ω–∞–ª–∏—á–∏–µ).
 –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äî —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ –∑–Ω–∞–µ—à—å.
 
 –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
 {chat_history}
 
 –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã:
 {context}
 
 –í–æ–ø—Ä–æ—Å:
 {question}
 
 –û—Ç–≤–µ—Ç:
 """
 )
 db = Chroma(
     persist_directory="rag_knowledge_base/chroma_db",
     embedding_function=HuggingFaceEmbeddings(model_name="intfloat/multilingual-e5-small")
 )
 llm = Ollama(model="yandex/YandexGPT-5-Lite-8B-instruct-GGUF")
 memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
 qa = ConversationalRetrievalChain.from_llm(
     llm=llm,
     retriever=db.as_retriever(),
     memory=memory,
     combine_docs_chain_kwargs={"prompt": prompt_template}
diff --git a/rag_bot.py b/rag_bot.py
index 2036c3861865a3048422e801dad2eb90aaff4a19..4b9708745545bcd2a360f7c81799563fef10ef73 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -159,100 +160,136 @@ def extract_product_name(query: str) -> str:
                 '–º–æ–∂–Ω–æ', '–∑–∞–±—Ä–∞—Ç—å', '–∫–∞–∫–æ–µ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–≤', '—Å–∞–º–æ–≤—ã–≤–æ–∑', '–¥–æ—Å—Ç–∞–≤–∫–∞'}
     words = [word for word in re.findall(r'\w+', query.lower()) if word not in stop_words]
     return ' '.join(words)
 
 def get_product_stock(meta_href: str, api_key: str) -> str:
     url = f"https://api.moysklad.ru/api/remap/1.2/report/stock/bystore?filter=product={meta_href}"
     headers = {"Authorization": f"Bearer {api_key}", "Accept-Encoding": "gzip", "Content-Type": "application/json"}
     try:
         response = requests.get(url, headers=headers)
         response.raise_for_status()
         data = response.json()
         rows = data.get("rows", [])
         stocks = []
         for item in rows:
             for store in item.get("stockByStore", []):
                 if store.get("stock", 0) > 0:
                     store_name = store.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
                     stocks.append(f"‚Ä¢ {store_name}: {int(store['stock'])} —à—Ç.")
         if stocks:
             return "üîç **–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞:**\n" + "\n".join(stocks)
         return "–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏."
     except requests.exceptions.RequestException as e:
         logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
         return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è: {str(e)}"
 
+def respond_with_delivery_info(address: str) -> None:
+    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞."""
+    try:
+        order_sum = int(input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (‚Ç∏): "))
+    except Exception:
+        order_sum = 0
+    delivery_msg = get_delivery_price(address, order_sum)
+    print("–ë–æ—Ç:", delivery_msg)
+    coords = geocode_address_2gis(address)
+    if coords:
+        nearest, dist = find_nearest_pickup(coords, pickup_points)
+        print(
+            f"–ë–æ—Ç: –ë–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ ‚Äî {nearest['name']} ({nearest['address']}). –î–æ –Ω–µ—ë {dist:.1f} –∫–º."
+        )
+    else:
+        print(
+            "–ë–æ—Ç: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
+        )
+
 print("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Hani –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É. –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ '–≤—ã—Ö–æ–¥':")
 logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
 
 current_selection = None
 last_product_query = None
 user_address = None
 order_sum = 0
+awaiting_delivery_choice = False
+awaiting_address = False
 
 clarifying_phrases = [
     '–µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏', '–µ—Å—Ç—å?', '–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å?', '–¥–æ—Å—Ç—É–ø–µ–Ω?', '—Å–∞–º–æ–≤—ã–≤–æ–∑',
     '–≥–¥–µ –∑–∞–±—Ä–∞—Ç—å', '–∞ –µ—Å—Ç—å', '–µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏', '–Ω–∞–ª–∏—á–∏–µ?', '–≥–¥–µ –≤–∑—è—Ç—å',
-    '–∑–∞–±—Ä–∞—Ç—å', '–Ω–∞ —Ç–æ—á–∫–µ', '–Ω–∞ –∫–∞–∫–æ–π —Ç–æ—á–∫–µ', '–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞', '—Ç–æ—á–∫–∞'
+    '–∑–∞–±—Ä–∞—Ç—å', '–Ω–∞ —Ç–æ—á–∫–µ', '–Ω–∞ –∫–∞–∫–æ–π —Ç–æ—á–∫–µ', '–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞', '—Ç–æ—á–∫–∞',
+    '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π'
 ]
 
 while True:
     q = input("–í—ã: ").strip()
     logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: '{q}'")
 
+    if awaiting_address:
+        user_address = q
+        respond_with_delivery_info(user_address)
+        awaiting_address = False
+        continue
+
+    if awaiting_delivery_choice:
+        if "—Å–∞–º–æ–≤—ã–≤–æ–∑" in q.lower() or "–∑–∞–±—Ä–∞—Ç—å" in q.lower():
+            print(
+                "–ë–æ—Ç: –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞."
+            )
+            awaiting_delivery_choice = False
+            awaiting_address = True
+            continue
+        else:
+            user_address = q
+            respond_with_delivery_info(user_address)
+            awaiting_delivery_choice = False
+            continue
+
     # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏, –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –ø–æ –∞–¥—Ä–µ—Å—É –∏–ª–∏ —Ä–∞–π–æ–Ω—É ---
     if any(word in q.lower() for word in ["–≥–æ—Ä–æ–¥", "–∞–¥—Ä–µ—Å", "–Ω–∞—Ö–æ–∂—É—Å—å", "—è –∏–∑", "—Ä–∞–π–æ–Ω", "–¥–æ—Å—Ç–∞–≤–∫–∞"]):
         user_address = q
-        try:
-            order_sum = int(input("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ (‚Ç∏): "))
-        except Exception:
-            order_sum = 0
-        delivery_msg = get_delivery_price(user_address, order_sum)
-        print("–ë–æ—Ç:", delivery_msg)
-        coords = geocode_address_2gis(user_address)
-        if coords:
-            nearest, dist = find_nearest_pickup(coords, pickup_points)
-            print(f"–ë–æ—Ç: –ë–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ ‚Äî {nearest['name']} ({nearest['address']}). –î–æ –Ω–µ—ë {dist:.1f} –∫–º.")
-        else:
-            print("–ë–æ—Ç: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
+        respond_with_delivery_info(user_address)
         continue
 
     # --- –¢–æ–≤–∞—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ ---
     if q.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
         logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
         print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
         break
 
     if current_selection and q.isdigit():
         choice = int(q)
         if 1 <= choice <= len(current_selection):
             selected_product = current_selection[choice-1]
             product_row = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == selected_product].iloc[0]
             meta_href = product_row["Meta Href"]
             logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: Meta Href={meta_href}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{product_row['–ù–∞–∑–≤–∞–Ω–∏–µ']}'")
             stock_info = get_product_stock(meta_href, MOYSKLAD_API_KEY)
             print("–ë–æ—Ç:", stock_info)
+            if "–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" not in stock_info.lower():
+                print(
+                    "–ë–æ—Ç: –•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ '—Å–∞–º–æ–≤—ã–≤–æ–∑' –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
+                )
+                awaiting_delivery_choice = True
             last_product_query = selected_product.lower()
             current_selection = None
             continue
         else:
             print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
             continue
 
     if current_selection:
         print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
         continue
 
     if detect_stock_question(q):
         query_words = extract_product_name(q).split()
         if (
             (len(query_words) <= 2 and last_product_query)
             or any(phrase in q.lower() for phrase in clarifying_phrases)
         ):
             product_query = last_product_query if last_product_query else extract_product_name(q)
         else:
             product_query = extract_product_name(q)
             last_product_query = product_query
 
         logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞: '{product_query}'")
         if not product_query:
             print("–ë–æ—Ç: –°–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")
diff --git a/rag_bot.py b/rag_bot.py
index 2036c3861865a3048422e801dad2eb90aaff4a19..4b9708745545bcd2a360f7c81799563fef10ef73 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -260,31 +297,36 @@ while True:
 
         similar_products = find_similar_products(product_query, all_product_names)
         if not similar_products:
             print("–ë–æ—Ç: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ.")
             continue
 
         if len(similar_products) > 1:
             original_names = []
             for name in similar_products:
                 original_name = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == name].iloc[0]["–ù–∞–∑–≤–∞–Ω–∏–µ"]
                 original_names.append(original_name)
 
             print("–ë–æ—Ç: –£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:")
             for i, name in enumerate(original_names, 1):
                 print(f"{i}. {name}")
             print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
             current_selection = original_names
             continue
 
         product_name = similar_products[0]
         product_row = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == product_name].iloc[0]
         meta_href = product_row["Meta Href"]
         logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: Meta Href={meta_href}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{product_row['–ù–∞–∑–≤–∞–Ω–∏–µ']}'")
         stock_info = get_product_stock(meta_href, MOYSKLAD_API_KEY)
         print("–ë–æ—Ç:", stock_info)
+        if "–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" not in stock_info.lower():
+            print(
+                "–ë–æ—Ç: –•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ '—Å–∞–º–æ–≤—ã–≤–æ–∑' –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
+            )
+            awaiting_delivery_choice = True
         last_product_query = product_name
 
     else:
         logger.info("–í–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ –Ω–∞–ª–∏—á–∏–µ - –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ YandexGPT")
         result = qa.run(q)
         print("–ë–æ—Ç:", result)
 
EOF
)