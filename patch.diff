 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/rag_bot.py b/rag_bot.py
index c5454820c2ed64475d51004224d3521cf4ffb975..f8df6a60ed44845d38d8dac9a3d2e91ed09dd96f 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -1,55 +1,58 @@
 from langchain_community.vectorstores import Chroma
 from langchain_community.embeddings import HuggingFaceEmbeddings
 from langchain_community.llms import Ollama
 from langchain.chains import ConversationalRetrievalChain
 from langchain.memory import ConversationBufferMemory
 from langchain.prompts import PromptTemplate
 import requests
 import pandas as pd
 import logging
 import re
+import glob
 from difflib import get_close_matches
 from geopy.distance import geodesic
 
 # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
 logging.basicConfig(
     level=logging.INFO,
     format='%(asctime)s - %(levelname)s - %(message)s',
     handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
 )
 logger = logging.getLogger(__name__)
 
 # --- –ö–æ–Ω—Ñ–∏–≥–∏ ---
 MOYSKLAD_API_KEY = "437b4e11276436c76fa225094a7ff48c25e5bc77"
 DGIS_API_KEY = "7c52ad61-fb25-4272-98c9-557a0038ec6c"
 FREE_DELIVERY_SUM = 10000
 
 products_df = pd.read_excel("product_id.xlsx")
 all_product_names = products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.lower().tolist()
 
 order = []
+pending_product = None
+awaiting_quantity = False
 
 # --- –°–∞–º–æ–≤—ã–≤–æ–∑ —Ç–æ—á–∫–∏ (—Å–¥–µ–ª–∞–π lat/lon –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É) ---
 pickup_points = [
     {"city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "name": "Hani, –¢–∞—Ç—Ç–∏–º–±–µ—Ç–∞ 105",  "address": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, —É–ª. –¢–∞—Ç—Ç–∏–º–±–µ—Ç–∞ 105"},
     {"city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "name": "Hani, –®–∞—Ö—Ç–µ—Ä–æ–≤ 52",     "address": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, —É–ª. –®–∞—Ö—Ç–µ—Ä–æ–≤ 52"},
     {"city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "name": "Hani, –¢–¶ –ì–ª–æ–±–∞–ª –°–∏—Ç–∏",  "address": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, –¢–¶ –ì–ª–æ–±–∞–ª –°–∏—Ç–∏"},
     {"city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "name": "Hani, –¢–¶ –¢–∞–∏—Ä",         "address": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, –¢–¶ –¢–∞–∏—Ä"},
     {"city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "name": "Hani, –ë—É—Ö–∞—Ä –ñ—ã—Ä–∞—É 41",  "address": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, –ø—Ä. –ë—É—Ö–∞—Ä –ñ—ã—Ä–∞—É 41"},
     {"city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "name": "Hani, –ê–±–¥–∏—Ä–æ–≤–∞ 172",    "address": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, —É–ª. –ê–±–¥–∏—Ä–æ–≤–∞ 172"},
     {"city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "name": "Hani, –ì–æ–≥–æ–ª—è 68",       "address": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, —É–ª. –ì–æ–≥–æ–ª—è 68"},
     {"city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "name": "Hani, –ß–∫–∞–ª–æ–≤–∞ 2",       "address": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, —É–ª. –ß–∫–∞–ª–æ–≤–∞ 2"},
     {"city": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞", "name": "Hani, –ù–∞–∑–∞—Ä–±–∞–µ–≤–∞ 3",    "address": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞, –ø—Ä. –ù–∞–∑–∞—Ä–±–∞–µ–≤–∞ 3"},
     {"city": "–¢–µ–º–∏—Ä—Ç–∞—É",  "name": "Hani, –ø—Ä. –ú–∏—Ä–∞ 712",    "address": "–¢–µ–º–∏—Ä—Ç–∞—É, –ø—Ä. –ú–∏—Ä–∞ 712"},
     {"city": "–¢–µ–º–∏—Ä—Ç–∞—É",  "name": "Hani, –†–µ—Å–ø—É–±–ª–∏–∫–∏ 86",   "address": "–¢–µ–º–∏—Ä—Ç–∞—É, —É–ª. –†–µ—Å–ø—É–±–ª–∏–∫–∏ 86"},
     {"city": "–¢–µ–º–∏—Ä—Ç–∞—É",  "name": "Hani, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω 43–∞",  "address": "–¢–µ–º–∏—Ä—Ç–∞—É, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω 43–∞"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –¢—É—Ä–∫–µ—Å—Ç–∞–Ω 20",    "address": "–ê—Å—Ç–∞–Ω–∞, —É–ª. –¢—É—Ä–∫–µ—Å—Ç–∞–Ω 20"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –¢—É—Ä–∫–µ—Å—Ç–∞–Ω 28",    "address": "–ê—Å—Ç–∞–Ω–∞, —É–ª. –¢—É—Ä–∫–µ—Å—Ç–∞–Ω 28"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –ò–º–∞–Ω–±–∞–µ–≤–∞ 7–∞",    "address": "–ê—Å—Ç–∞–Ω–∞, —É–ª. –ò–º–∞–Ω–±–∞–µ–≤–∞ 7–∞"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –ú–∞–Ω–≥–∏–ª–∏–∫ –µ–ª 45–∞", "address": "–ê—Å—Ç–∞–Ω–∞, –ø—Ä. –ú–∞–Ω–≥–∏–ª–∏–∫ –µ–ª 45–∞"},
     {"city": "–ê—Å—Ç–∞–Ω–∞",    "name": "Hani, –¢–∞—É–µ–ª—Å–∏–∑–¥–∏–∫ 39",  "address": "–ê—Å—Ç–∞–Ω–∞, –ø—Ä. –¢–∞—É–µ–ª—Å–∏–∑–¥–∏–∫ 39"},
 ]
 
 delivery_zones = {
     "–≥–æ—Ä–æ–¥": 500, "—é–≥–æ-–≤–æ—Å—Ç–æ–∫": 500, "–º–∏—Ö–∞–π–ª–æ–≤–∫–∞": 500, "–∑–∞ —Ü–µ—Ä–∫–æ–≤—å—é": 1000,
     "—Ñ–µ–¥–æ—Ä–æ–≤–∫–∞": 500, "–ø–æ—Å–ª–µ –ø–æ–∂–∞—Ä–Ω–æ–π —á–∞—Å—Ç–∏": 1000, "–º–∞–π–∫—É–¥—É–∫ –¥–æ —Ç–¥ —É–º–∞–π": 1000,
diff --git a/rag_bot.py b/rag_bot.py
index c5454820c2ed64475d51004224d3521cf4ffb975..f8df6a60ed44845d38d8dac9a3d2e91ed09dd96f 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -160,150 +163,178 @@ def extract_product_name(query: str) -> str:
                 '—Å–∫–æ–ª—å–∫–æ', '–æ—Å—Ç–∞–ª–æ—Å—å', '–Ω–∞–ª–∏—á–∏–µ', '–Ω–∞', '—Ç–æ—á–∫–µ',
                 '–º–æ–∂–Ω–æ', '–∑–∞–±—Ä–∞—Ç—å', '–∫–∞–∫–æ–µ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–≤', '—Å–∞–º–æ–≤—ã–≤–æ–∑', '–¥–æ—Å—Ç–∞–≤–∫–∞'}
     words = [word for word in re.findall(r'\w+', query.lower()) if word not in stop_words]
     return ' '.join(words)
 
 def get_product_stock(meta_href: str, api_key: str) -> str:
     url = f"https://api.moysklad.ru/api/remap/1.2/report/stock/bystore?filter=product={meta_href}"
     headers = {"Authorization": f"Bearer {api_key}", "Accept-Encoding": "gzip", "Content-Type": "application/json"}
     try:
         response = requests.get(url, headers=headers)
         response.raise_for_status()
         data = response.json()
         rows = data.get("rows", [])
         stocks = []
         for item in rows:
             for store in item.get("stockByStore", []):
                 if store.get("stock", 0) > 0:
                     store_name = store.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∫–ª–∞–¥")
                     stocks.append(f"‚Ä¢ {store_name}: {int(store['stock'])} —à—Ç.")
         if stocks:
             return "üîç **–ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞:**\n" + "\n".join(stocks)
         return "–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏."
     except requests.exceptions.RequestException as e:
         logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
         return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è: {str(e)}"
+
+def get_product_price(product_name: str) -> int:
+    """–ò—â–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë."""
+    price_pattern = re.compile(r"–¶–µ–Ω–∞:\s*(\d+)")
+    for path in glob.glob("rag_knowledge_base/menu_*.txt"):
+        with open(path, encoding="utf-8") as f:
+            for line in f:
+                if product_name.lower() in line.lower():
+                    m = price_pattern.search(line)
+                    if m:
+                        return int(m.group(1))
+    return 0
     
 # --- –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–æ–º ---
 def summarize_order() -> int:
     """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É."""
     total = 0
     if not order:
         print("–ë–æ—Ç: –ó–∞–∫–∞–∑ –ø—É—Å—Ç.")
         return total
     print("–ë–æ—Ç: –í–∞—à –∑–∞–∫–∞–∑:")
     for item in order:
         subtotal = item["price"] * item["quantity"]
         total += subtotal
         print(f" - {item['name']} x{item['quantity']} = {subtotal} ‚Ç∏")
     print(f"–ò—Ç–æ–≥–æ: {total} ‚Ç∏")
     return total
 
-def respond_with_delivery_info(address: str) -> None:
+def respond_with_delivery_info(address: str, order_total: int) -> None:
     """–°–æ–æ–±—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞."""
-    order_sum = summarize_order()
-    delivery_msg = get_delivery_price(address, order_sum)
+    delivery_msg = get_delivery_price(address, order_total)
     print("–ë–æ—Ç:", delivery_msg)
     coords = geocode_address_2gis(address)
     if coords:
         nearest, dist = find_nearest_pickup(coords, pickup_points)
         print(
             f"–ë–æ—Ç: –ë–ª–∏–∂–∞–π—à–∞—è —Ç–æ—á–∫–∞ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ ‚Äî {nearest['name']} ({nearest['address']}). –î–æ –Ω–µ—ë {dist:.1f} –∫–º."
         )
     else:
         print(
             "–ë–æ—Ç: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
         )
 
 
 print("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç Hani –≥–æ—Ç–æ–≤ –∫ –¥–∏–∞–ª–æ–≥—É. –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ '–≤—ã—Ö–æ–¥':")
 logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
 
 current_selection = None
 last_product_query = None
 user_address = None
 awaiting_delivery_choice = False
 awaiting_address = False
 
 clarifying_phrases = [
     '–µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏', '–µ—Å—Ç—å?', '–º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å?', '–¥–æ—Å—Ç—É–ø–µ–Ω?', '—Å–∞–º–æ–≤—ã–≤–æ–∑',
     '–≥–¥–µ –∑–∞–±—Ä–∞—Ç—å', '–∞ –µ—Å—Ç—å', '–µ—Å—Ç—å –ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏', '–Ω–∞–ª–∏—á–∏–µ?', '–≥–¥–µ –≤–∑—è—Ç—å',
     '–∑–∞–±—Ä–∞—Ç—å', '–Ω–∞ —Ç–æ—á–∫–µ', '–Ω–∞ –∫–∞–∫–æ–π —Ç–æ—á–∫–µ', '–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞', '—Ç–æ—á–∫–∞',
     '–¥–æ—Å—Ç–∞–≤–∫–∞', '—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π'
 ]
 
 while True:
     q = input("–í—ã: ").strip()
     logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: '{q}'")
 
     if awaiting_address:
         user_address = q
-        respond_with_delivery_info(user_address)
+        total = summarize_order()
+        respond_with_delivery_info(user_address, total)
         awaiting_address = False
         continue
 
+    if awaiting_quantity:
+        if q.isdigit():
+            qty = int(q)
+            order.append({"name": pending_product["name"], "price": pending_product["price"], "quantity": qty})
+            print(f"–ë–æ—Ç: –î–æ–±–∞–≤–ª–µ–Ω–æ {pending_product['name']} x{qty} –≤ –∑–∞–∫–∞–∑.")
+            pending_product = None
+            awaiting_quantity = False
+            print("–ë–æ—Ç: –•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë? –ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏, –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–∞–º–æ–≤—ã–≤–æ–∑' –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.")
+            awaiting_delivery_choice = True
+        else:
+            print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–æ–π.")
+        continue
+
     if awaiting_delivery_choice:
         if "—Å–∞–º–æ–≤—ã–≤–æ–∑" in q.lower() or "–∑–∞–±—Ä–∞—Ç—å" in q.lower():
+            summarize_order()
             print(
                 "–ë–æ—Ç: –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –∞–¥—Ä–µ—Å, —á—Ç–æ–±—ã –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞."
             )
             awaiting_delivery_choice = False
             awaiting_address = True
             continue
         else:
             user_address = q
-            respond_with_delivery_info(user_address)
+            total = summarize_order()
+            respond_with_delivery_info(user_address, total)
             awaiting_delivery_choice = False
             continue
 
 
     # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏, –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –ø–æ –∞–¥—Ä–µ—Å—É –∏–ª–∏ —Ä–∞–π–æ–Ω—É ---
     if any(word in q.lower() for word in ["–≥–æ—Ä–æ–¥", "–∞–¥—Ä–µ—Å", "–Ω–∞—Ö–æ–∂—É—Å—å", "—è –∏–∑", "—Ä–∞–π–æ–Ω", "–¥–æ—Å—Ç–∞–≤–∫–∞"]):
         user_address = q
-        respond_with_delivery_info(user_address)
+        total = summarize_order()
+        respond_with_delivery_info(user_address, total)
         continue
 
     # --- –¢–æ–≤–∞—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ ---
     if q.lower() in ["–≤—ã—Ö–æ–¥", "exit", "quit"]:
         logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
         print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
         break
 
     if current_selection and q.isdigit():
         choice = int(q)
         if 1 <= choice <= len(current_selection):
             selected_product = current_selection[choice-1]
             product_row = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"] == selected_product].iloc[0]
             meta_href = product_row["Meta Href"]
             logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: Meta Href={meta_href}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{product_row['–ù–∞–∑–≤–∞–Ω–∏–µ']}'")
             stock_info = get_product_stock(meta_href, MOYSKLAD_API_KEY)
             print("–ë–æ—Ç:", stock_info)
             if "–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" not in stock_info.lower():
-                print(
-                    "–ë–æ—Ç: –•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ '—Å–∞–º–æ–≤—ã–≤–æ–∑' –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
-                )
-                awaiting_delivery_choice = True
+                price = get_product_price(product_row["–ù–∞–∑–≤–∞–Ω–∏–µ"])
+                pending_product = {"name": product_row["–ù–∞–∑–≤–∞–Ω–∏–µ"], "price": price}
+                print("–ë–æ—Ç: –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑?")
+                awaiting_quantity = True
             last_product_query = selected_product.lower()
             current_selection = None
             continue
         else:
             print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
             continue
 
     if current_selection:
         print("–ë–æ—Ç: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.")
         continue
 
     if detect_stock_question(q):
         query_words = extract_product_name(q).split()
         if (
             (len(query_words) <= 2 and last_product_query)
             or any(phrase in q.lower() for phrase in clarifying_phrases)
         ):
             product_query = last_product_query if last_product_query else extract_product_name(q)
         else:
             product_query = extract_product_name(q)
             last_product_query = product_query
 
         logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–∞: '{product_query}'")
         if not product_query:
             print("–ë–æ—Ç: –°–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.")
diff --git a/rag_bot.py b/rag_bot.py
index c5454820c2ed64475d51004224d3521cf4ffb975..f8df6a60ed44845d38d8dac9a3d2e91ed09dd96f 100644
--- a/rag_bot.py
+++ b/rag_bot.py
@@ -312,35 +343,35 @@ while True:
         similar_products = find_similar_products(product_query, all_product_names)
         if not similar_products:
             print("–ë–æ—Ç: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ.")
             continue
 
         if len(similar_products) > 1:
             original_names = []
             for name in similar_products:
                 original_name = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == name].iloc[0]["–ù–∞–∑–≤–∞–Ω–∏–µ"]
                 original_names.append(original_name)
 
             print("–ë–æ—Ç: –£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–æ–≤–∞—Ä –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:")
             for i, name in enumerate(original_names, 1):
                 print(f"{i}. {name}")
             print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.")
             current_selection = original_names
             continue
 
         product_name = similar_products[0]
         product_row = products_df[products_df["–ù–∞–∑–≤–∞–Ω–∏–µ"].str.lower() == product_name].iloc[0]
         meta_href = product_row["Meta Href"]
         logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: Meta Href={meta_href}, –Ω–∞–∑–≤–∞–Ω–∏–µ='{product_row['–ù–∞–∑–≤–∞–Ω–∏–µ']}'")
         stock_info = get_product_stock(meta_href, MOYSKLAD_API_KEY)
         print("–ë–æ—Ç:", stock_info)
         if "–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏" not in stock_info.lower():
-            print(
-                "–ë–æ—Ç: –•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ '—Å–∞–º–æ–≤—ã–≤–æ–∑' –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
-            )
-            awaiting_delivery_choice = True
+            price = get_product_price(product_row["–ù–∞–∑–≤–∞–Ω–∏–µ"])
+            pending_product = {"name": product_row["–ù–∞–∑–≤–∞–Ω–∏–µ"], "price": price}
+            print("–ë–æ—Ç: –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑?")
+            awaiting_quantity = True
         last_product_query = product_name
 
     else:
         logger.info("–í–æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ –Ω–∞–ª–∏—á–∏–µ - –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ YandexGPT")
         result = qa.run(q)
         print("–ë–æ—Ç:", result)
 
EOF
)